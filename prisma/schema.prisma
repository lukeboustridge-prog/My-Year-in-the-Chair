generator client { provider = "prisma-client-js" }
datasource db { provider = "sqlite"; url = env("DATABASE_URL") }

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  emailVerified DateTime?
  name          String?
  passwordHash  String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  visits        Visit[]
  points        Int      @default(0)
  role          Role     @default(USER)
  accounts      Account[]
  sessions      Session[]
}

model Visit {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  date        DateTime
  lodgeName   String
  lodgeNumber String
  location    String?
  notes       String?
  createdAt   DateTime @default(now())
}

model Resource {
  id        String   @id @default(cuid())
  title     String
  slug      String   @unique
  summary   String?
  url       String?
  createdAt DateTime @default(now())
}

model Badge {
  id        String   @id @default(cuid())
  code      String   @unique
  name      String
  points    Int      @default(0)
  criteria  String?
  awards    Award[]
  createdAt DateTime @default(now())
}

model Award {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  badge     Badge    @relation(fields: [badgeId], references: [id])
  badgeId   String
  awardedAt DateTime @default(now())
}

enum Role { USER ADMIN }

// NextAuth models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}
