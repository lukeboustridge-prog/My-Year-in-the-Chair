generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum WorkType {
  INITIATION
  PASSING
  RAISING
  INSTALLATION
  PRESENTATION
  LECTURE
  OTHER
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  name          String?
  passwordHash  String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Simplified profile
  prefix        String?
  postNominals  String[]
  rank          String?    // e.g., "Master Mason", "Grand Steward", "Deputy Grand Master", "Grand Master"
  isPastGrand   Boolean    @default(false)
  currentCraftOffice String?

  lodgeName     String?
  lodgeNumber   String?
  region        String?

  termStart     DateTime?
  termEnd       DateTime?

  points        Int      @default(0)
  visits        Visit[]
  works         LodgeWork[]
  myWorks       MyWork[]
  lodgeWorkRsvps LodgeWorkRsvp[]
  awards        Award[]
  role          String   @default("USER")
}

model Visit {
  id            String   @id @default(cuid())
  user          User     @relation(fields: [userId], references: [id])
  userId        String

  date          DateTime
  lodgeName     String?
  lodgeNumber        String?

  workOfEvening      WorkType @default(OTHER)
  candidateName      String?
  comments           String?

  isGrandLodgeVisit  Boolean  @default(false)
  hasTracingBoards   Boolean  @default(false)
  notes              String?
  createdAt     DateTime @default(now())

  lodgeWorkRsvp LodgeWorkRsvp? @relation("VisitRsvp")
}

model LodgeWork {
  id            String   @id @default(cuid())
  user          User     @relation(fields: [userId], references: [id])
  userId        String

  month         Int
  year          Int
  work                 WorkType @default(OTHER)
  candidateName        String?
  notes                String?
  isGrandLodgeVisit    Boolean  @default(false)
  isEmergencyMeeting   Boolean  @default(false)
  hasTracingBoards     Boolean  @default(false)
  hasFirstTracingBoard  Boolean  @default(false)
  hasSecondTracingBoard Boolean  @default(false)
  hasThirdTracingBoard  Boolean  @default(false)
  displayOnEventsPage  Boolean  @default(false)

  rsvps          LodgeWorkRsvp[]

  createdAt     DateTime @default(now())
}

model MyWork {
  id            String   @id @default(cuid())
  user          User     @relation(fields: [userId], references: [id])
  userId        String

  date          DateTime
  work          WorkType @default(OTHER)
  candidateName String?
  comments      String?
  isGrandLodgeVisit    Boolean  @default(false)
  isEmergencyMeeting   Boolean  @default(false)
  hasFirstTracingBoard  Boolean  @default(false)
  hasSecondTracingBoard Boolean  @default(false)
  hasThirdTracingBoard  Boolean  @default(false)

  createdAt     DateTime @default(now())
}

model Resource {
  id        String   @id @default(cuid())
  title     String
  slug      String   @unique
  summary   String?
  url       String?
  createdAt DateTime @default(now())
}

model LodgeWorkRsvp {
  id           String    @id @default(cuid())
  lodgeWork    LodgeWork @relation(fields: [lodgeWorkId], references: [id])
  lodgeWorkId  String
  user         User      @relation(fields: [userId], references: [id])
  userId       String
  visit        Visit?    @relation("VisitRsvp", fields: [visitId], references: [id])
  visitId      String?   @unique

  createdAt    DateTime  @default(now())

  @@unique([lodgeWorkId, userId])
}

model Badge {
  id        String   @id @default(cuid())
  code      String   @unique
  name      String
  points    Int      @default(0)
  criteria  String?
  awards    Award[]
  createdAt DateTime @default(now())
}

model Award {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  badge     Badge    @relation(fields: [badgeId], references: [id])
  badgeId   String
  awardedAt DateTime @default(now())
}
